{
	"python_template": {
		"prefix": "template",
		"body": [
			"#library",
			"import sys, re, heapq",
			"from math import sin, cos, radians, ceil, floor, sqrt, isqrt, pi, gcd, comb",
			"from collections import deque, Counter, defaultdict",
			"from bisect import bisect, bisect_left, bisect_right",
			"from functools import lru_cache",
			"from itertools import permutations, combinations, product",
			"",
			"sys.setrecursionlimit(10**6)",
			"INF = float('inf')",
			"",
			"#class",
			"",
			"#def",
			"",
			"#main",
			"def main():",
			"\t$1",
			"",
			"if __name__ == '__main__':",
			"\tmain()"
		],
	},
	"N:１入力(int)": {
	  "prefix": "N =",
	  "body": [
		"N = int(input())",
		"$1"
	  ]

	},
	"S:１入力(string)": {
	  "prefix": "S =",
	  "body": [
		"S = input()",
		"$1"
	  ]
	},
	"N, M:2入力(int)": {
	  "prefix": "N, M =",
	  "body": [
		"N, M = map(int,input().split())",
		"$1"
	  ]
	},
	"H, W:2入力(縦横)": {
	  "prefix": "H, W =",
	  "body": [
		"H, W = map(int,input().split())",
		"$1"
	  ]
	},
	"複数回の(A, B)を別々に保存": {
		"prefix": "A, B = [], []",
		"body": [
			"A, B = [], []",
			"for _ in range(N):",
			"\ta, b = map(int, input().split(' '))",
			"\tA.append(a)",
			"\tB.append(b)",
			"$1"
		]
	},
	"複数回の１入力(int)": {
		"prefix": "L = [int(input()) for _ in range(N)]",
		"body": [
			"L = [int(input()) for _ in range(N)]",
			"$1"
		]
	},

	"複数回のN(int)入力": {
		"prefix": "Q = [list(map(int, input().split(' '))) for _ in range(N)]",
		"body": [
			"Q = [list(map(int, input().split(' '))) for _ in range(N)]",
			"$1"
		]
	},
	"[A_1, A_2, A_3, ...]": {
		"prefix": "A = list(map(int, input().split(' ')))",
		"body": [
			"A = list(map(int, input().split(' ')))",
			"$1"
		]
	},
	"['s', 't', 'r', 'i', 'n', 'g' ...]": {
		"prefix": "S = list(input())",
		"body": [
			"S = list(input())",
			"$1"
		]
	},

	"UnionFind": {
		"prefix": "unionfind",
		"body": [
			"class UnionFind:",
			"    def __init__(self, n):",
			"        self.n = n",
			"        self.parent_size = [-1] * n",
			"",
			"    def leader(self, a):",
			"        if self.parent_size[a] < 0:",
			"            return a",
			"        self.parent_size[a] = self.leader(self.parent_size[a])",
			"        return self.parent_size[a]",
			"",
			"    def merge(self, a, b):",
			"        x, y = self.leader(a), self.leader(b)",
			"        if x == y:",
			"            return",
			"        if abs(self.parent_size[x]) < abs(self.parent_size[y]):",
			"            x, y = y, x",
			"        self.parent_size[x] += self.parent_size[y]",
			"        self.parent_size[y] = x",
			"",
			"    def same(self, a, b):",
			"        return self.leader(a) == self.leader(b)",
			"",
			"    def size(self, a):",
			"        return abs(self.parent_size[self.leader(a)])",
			"",
			"    def groups(self):",
			"        result = [[] for _ in range(self.n)]",
			"        for i in range(self.n):",
			"            result[self.leader(i)].append(i)",
			"        return [r for r in result if r]",
			"$1"                                   
		]
	},

	"素因数分解 prime_factorize": {
		"prefix": "prime_factorize",
		"body": [
			"def prime_factorize(n):",
			"    \"\"\"",
			"    素因数分解：整数 n を素因数分解して、素因数のリストを返す。",
			"",
			"    Parameters:",
			"        n (int): 分解する整数",
			"",
			"    Returns:",
			"        list[int]: n を素因数分解した結果のリスト（重複あり、昇順）",
    		"    \"\"\"",
			"    factors = []",
			"    while n % 2 == 0:",
			"        factors.append(2)",
			"        n //= 2",
			"    f = 3",
			"    while f * f <= n:",
			"        if n % f == 0:",
			"            factors.append(f)",
			"            n //= f",
			"        else:",
			"            f += 2",
			"    if n != 1:",
			"        factors.append(n)",
			"    return factors",
			"$1"
		]
	},

	"nCr % mod": {
		"prefix": "nCr_mod",
		"body": [
			"def nCr_mod(n, r, mod):",
			"    \"\"\"",
			"    n, r, mod を引数とし、nCr を mod で割った余りを返す関数",
			"    \"\"\"",
			"    # 分子",
			"    numerator = 1",
			"    for i in range(n - r + 1, n + 1):",
			"        numerator *= i",
			"        numerator %= mod",
			"    # 分母",
			"    denominator = 1",
			"    for i in range(1, r + 1):",
			"        denominator *= i",
			"        denominator %= mod",
			"    # モジュラ逆元",
			"    denominator_inv = pow(denominator, -1, mod)",
			"    return numerator * denominator_inv % mod",
			"$1"
		]
	},

	"base_10": {
		"prefix": "base_10",
		"body": [
			"def base_10(num_n, n):",
			"    \"\"\"",
			"    n 進数で表された整数を 10 進数に変換する。",
			"",
			"    Parameters:",
			"        num_n (int | str): n 進数で表された数（各桁は 0 ≦ d < n）。",
			"        n (int): 基数。",
			"",
			"    Returns:",
			"        int: 10 進数に変換した結果。",
			"    \"\"\"",
			"    num_10 = 0",
			"    for s in str(num_n):",
			"        num_10 *= n",
			"        num_10 += int(s)",
			"    return num_10",
			"$1"
		]
	},

	"base_n": {
		"prefix": "base_n",
		"body": [
			"def base_n(num_10, n):",
			"    \"\"\"",
			"    10 進数の整数を n 進数表記の整数へ変換する。",
			"",
			"    Parameters:",
			"        num_10 (int): 10 進数の整数。",
			"        n (int): 基数 (2 ≦ n ≦ 10)。",
			"",
			"    Returns:",
			"        int: n 進数で表した整数。",
			"             基数 n が 10 未満でない桁が生じる場合は -1 を返す。",
			"    \"\"\"",
			"    if num_10 == 0:",
			"        return 0",
			"",
			"    str_n = ''",
			"    while num_10:",
			"        digit = num_10 % n",
			"        if digit >= 10:",
			"            return -1  # n > 10 に対応しない簡易実装",
			"        str_n += str(digit)",
			"        num_10 //= n",
			"",
			"    return int(str_n[::-1])"
		]
	}




	
}